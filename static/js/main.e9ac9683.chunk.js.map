{"version":3,"sources":["BTNS.js","Value.js","store.js","App.js","serviceWorker.js","index.js"],"names":["BTNS","render","btnColor","_this","props","count_start","react_default","a","createElement","className","onClick","increment","disabled","reset","React","Component","Value","changeColor","initialState","store","createStore","state","arguments","length","undefined","action","type","_objectSpread","amount","App","step","src_Value","src_BTNS","ConnectedApp","connect","Boolean","window","location","hostname","match","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAsBeA,oNAlBXC,OAAS,WACL,IAAIC,EAAsC,IAA3BC,EAAKC,MAAMC,YAAoB,WAAa,aAE3D,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAWP,EAAUQ,QAASP,EAAKC,MAAMO,UACzCC,SAAqC,IAA3BT,EAAKC,MAAMC,aAD7B,QAIJC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAWP,EAAUQ,QAASP,EAAKC,MAAMS,OAAjD,yCAZDC,IAAMC,YCWVC,6MAVXf,OAAS,WACL,IAAIgB,EAAyC,IAA3Bd,EAAKC,MAAMC,YAAoB,QAAU,GAC3D,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAWQ,GAAcd,EAAKC,MAAMC,4CALtCS,IAAMC,6PCDnB,IAGDG,EAAe,CACjBb,YAAa,GAwBFc,EADDC,YApBE,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBJ,EAAcO,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9C,OAAQC,EAAOC,MACX,IATiB,YAUb,4VAAAC,CAAA,GACON,EADP,CAEIhB,YAAagB,EAAMhB,YAAcoB,EAAOG,SAGhD,IAda,QAeT,OAAOV,EAGf,OAAOG,ICbLQ,6MAEFR,MAAQ,CACJS,KAAK,KAGTnB,UAAW,WACPR,EAAKC,MAAMO,UAAUR,EAAKkB,MAAMS,SAIpC7B,OAAS,WACL,OACIK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAACuB,EAAD,CAAO1B,YAAaF,EAAKC,MAAMC,cAC/BC,EAAAC,EAAAC,cAACwB,EAAD,CAAMrB,UAAWR,EAAKQ,UAChBE,MAAOV,EAAKC,MAAMS,MAClBR,YAAaF,EAAKC,MAAMC,+CAnBpCS,IAAMC,WAmCTkB,EADMC,YAPG,SAACb,GACrB,MAAO,CACHhB,YAAagB,EAAMhB,cAKkB,CAACM,UDjBrB,SAAAiB,GAAM,MAAK,CAACF,KAvBZ,YAuB6BE,WCiBEf,MDhBnC,iBAAO,CAACa,KAvBR,WCuCAQ,CAA2CL,GC9B5CM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASvC,OACLK,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAUtB,MAAOA,GACbb,EAAAC,EAAAC,cAACkC,EAAD,OAEFC,SAASC,eAAe,SDqHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e9ac9683.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass BTNS extends React.Component {\n    render = () => {\n        let btnColor = this.props.count_start === 5 ? 'disabled' : 'decore_btn';\n\n        return (\n            <div className='btns'>\n                <div className='btn_border'>\n                    <button className={btnColor} onClick={this.props.increment}\n                            disabled={this.props.count_start === 5}>Inc\n                    </button>\n                </div>\n                <div className='btn_border'>\n                    <button className={btnColor} onClick={this.props.reset}>Reset</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default BTNS;\n\n","import React from 'react';\nimport './App.css';\n\nclass Value extends React.Component {\n    render = () => {\n        let changeColor = this.props.count_start === 5 ? 'error' : '';\n        return (\n            <div className='values'>\n                <span className={changeColor}>{this.props.count_start}</span>\n            </div>\n        )\n    }\n}\n\nexport default Value;\n\n","import {createStore} from \"redux\";\r\n\r\nexport const INCREMENT = \"INCREMENT\";\r\nexport const RESET = \"RESET\";\r\n\r\nconst initialState = {\r\n    count_start: 0\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INCREMENT: {\r\n            return {\r\n                ...state,\r\n                count_start: state.count_start + action.amount\r\n            }\r\n        }\r\n        case RESET: {\r\n            return initialState\r\n        }\r\n    }\r\n    return state\r\n};\r\n\r\n\r\nexport const increment = amount => ({type: INCREMENT, amount});\r\nexport const reset = () => ({type: RESET});\r\n\r\n\r\nconst store = createStore(reducer);\r\nexport default store;","import React from 'react';\nimport './App.css';\nimport BTNS from \"./BTNS\";\nimport Value from \"./Value\";\nimport {connect} from \"react-redux\";\nimport {increment, reset} from \"./store\";\n\n\nclass App extends React.Component {\n\n    state = {\n        step:1\n    };\n\n    increment= () => {\n        this.props.increment(this.state.step);\n    };\n\n\n    render = () => {\n        return (\n            <div className='counter_box'>\n                <div className='counters'>\n                    <div className='center'>\n                        <Value count_start={this.props.count_start}/>\n                        <BTNS increment={this.increment}\n                              reset={this.props.reset}\n                              count_start={this.props.count_start}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        count_start: state.count_start,\n    }\n};\n\n\nconst ConnectedApp = connect(mapStateToProps,{increment,reset})(App)\nexport default ConnectedApp;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}